#ifndef SAILDETAILS_H
#define SAILDETAILS_H

#include <string>

/**
 *  SailDetails class
 *  This class represents a valid sail from any port to a specific destination,
 *  Contains the time taken to sail from A to B, number of containers traveled in current sail,
 *  the departure time, and the destination.
 *
 *  The big 5:
 *  I implemented them even though some of them are default, because I chose to define a custom move constructor and
 *  A Move assignment operator, the others are not automatically generated by the compiler.
 *  This class contains fields that are movable, so I provide efficient move operations.
 ***/
class SailDetails {
    int timings{};              // Time in minutes taken from A to arrive to B.
    int containers{};           // Number of containers traveled in route.
    std::string departure;      // Departure time.
    std::string destination;    // Destination.
    int avg = 1;                // Used for averaging the timings from A to B. (number of times routes updated)

public:
    static int uniqueID;        // Unique id that's provided to each edge in the graph.

    explicit SailDetails() = default;                           // ctor's
    explicit SailDetails(std::string _departure);
    explicit SailDetails(int _containers, int _timings, std::string _departure, std::string _destination);

    SailDetails(const SailDetails& other);                      // Copy ctor.
    SailDetails(SailDetails&& other) noexcept;                  // Move ctor.
    SailDetails& operator=(const SailDetails& other);           // Copy assignment operator.
    SailDetails& operator=(SailDetails&&) noexcept = default;   // Move assignment operator.

    bool operator==(const SailDetails& other) const;     // Check if current departure == other.departure.
    bool operator<=(const SailDetails& other) const;     // Check if current departure <= other.departure.
    void set_avg_timings(int _timings);                  // Updates the timing field by averaging current with other

    int get_timings() const;                             // All fields getters.
    int get_containers() const;
    const std::string& get_departure() const;
    const std::string& get_destination() const;

    static void next_unique_id();
    ~SailDetails() = default;
};
#endif //SAILDETAILS_H